{"version":3,"sources":["js/components/StrokeWidthToolBar.js","js/components/ColorToolBar.js","js/components/DrawingTools.js","js/components/DrawingBoard.js","js/utils/CoreUtils.js","js/components/MainWrapper.js","js/App.js","serviceWorker.js","index.js"],"names":["StrokeWidthToolBar","props","strokeWidth","handleStrokeWidthSelect","useState","strokeWidthOptions","map","widthOption","key","className","onClick","style","width","height","ColorToolBar","color","handleColorSelect","colorOptions","colorOption","DrawingTools","tool","setTool","setStrokeWidth","setColor","handleResetBoard","id","name","icon","tools","showSubTools","setShowSubTools","toolItem","handleSelectTool","DrawingBoard","resetBoard","lines","setLines","isDrawing","useRef","useEffect","window","innerWidth","innerHeight","onMouseDown","e","current","pos","target","getStage","getPointerPosition","filteredLines","filter","line","points","x","y","onMousemove","point","lastLine","length","concat","splice","onMouseup","i","stroke","tension","lineCap","globalCompositeOperation","convertHexToRGBA","hexCode","opacity","hex","replace","r","parseInt","substring","g","b","MainWrapper","highlighterStrokeWidth","setResetBoard","console","log","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2e9982a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function StrokeWidthToolBar(props) {\n  const { strokeWidth, handleStrokeWidthSelect } = props;\n\n  const [strokeWidthOptions] = useState([1, 3, 5]);\n\n  return (\n    <>\n      {strokeWidthOptions.map((widthOption) => (\n        <div\n          key={widthOption}\n          className={`tool ${strokeWidth === widthOption && 'selected'}`}\n          onClick={() => handleStrokeWidthSelect(widthOption)}\n        >\n          <div\n            className='stroke-select'\n            style={{ width: 2 * widthOption, height: 2 * widthOption }}\n          >\n            <div className='tooltip'>Pen Thickness</div>\n          </div>\n        </div>\n      ))}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { ImPencil2 } from 'react-icons/im';\n\nexport default function ColorToolBar(props) {\n  const { color, handleColorSelect } = props;\n\n  const [colorOptions] = useState(['#000000', '#ff0000', '#00ff00', '#0000ff']);\n\n  return (\n    <>\n      {colorOptions.map((colorOption) => (\n        <div\n          key={colorOption}\n          className={`tool ${color === colorOption && 'selected'}`}\n          onClick={() => handleColorSelect(colorOption)}\n        >\n          <div className='color-select'>\n            <ImPencil2 style={{ color: colorOption }} />\n            <div className='tooltip'>Color</div>\n          </div>\n        </div>\n      ))}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { FaPen, FaHighlighter, FaEraser } from 'react-icons/fa';\nimport { GrPowerReset } from 'react-icons/gr';\n\nimport StrokeWidthToolBar from './StrokeWidthToolBar';\nimport ColorToolBar from './ColorToolBar';\n\nfunction DrawingTools(props) {\n  const {\n    tool,\n    setTool,\n    strokeWidth,\n    setStrokeWidth,\n    color,\n    setColor,\n    handleResetBoard\n  } = props;\n\n  const [tools] = useState([\n    {\n      id: 'pen',\n      name: 'Pen',\n      icon: <FaPen />\n    },\n    {\n      id: 'highlighter',\n      name: 'Highlighter',\n      icon: <FaHighlighter />\n    },\n    {\n      id: 'eraser',\n      name: 'Eraser',\n      icon: <FaEraser />\n    }\n  ]);\n\n  const [showSubTools, setShowSubTools] = useState(false);\n\n  const handleStrokeWidthSelect = (width) => {\n    setStrokeWidth(width);\n  };\n\n  const handleColorSelect = (color) => {\n    setColor(color);\n  };\n\n  const handleSelectTool = (toolItem) => {\n    setShowSubTools(true);\n\n    setTool(toolItem.id);\n  };\n\n  return (\n    <div className='drawing-tools-wrapper'>\n      <div className='drawing-tools'>\n        <div>\n          <div className='tools'>\n            {tools.map((toolItem) => (\n              <div\n                key={toolItem.id}\n                className={`tool ${tool === toolItem.id && 'selected'}`}\n                onClick={() => handleSelectTool(toolItem)}\n              >\n                {toolItem.icon}\n                <div className='tooltip'>{toolItem.name}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          {showSubTools && (\n            <div className='sub-toolbar'>\n              {(tool === 'pen' || tool === 'eraser') && (\n                <StrokeWidthToolBar\n                  strokeWidth={strokeWidth}\n                  handleStrokeWidthSelect={handleStrokeWidthSelect}\n                />\n              )}\n\n              {(tool === 'pen' || tool === 'highlighter') && (\n                <ColorToolBar\n                  color={color}\n                  handleColorSelect={handleColorSelect}\n                />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className='actions'>\n        <div className='tool' onClick={handleResetBoard}>\n          <GrPowerReset />\n          <div className='tooltip'>Reset Board</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DrawingTools;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Stage, Layer, Line, Text } from 'react-konva';\n\nexport default function DrawingBoard(props) {\n  const { tool, strokeWidth, color, resetBoard, handleResetBoard } = props;\n\n  const [lines, setLines] = useState([]);\n  const isDrawing = useRef(false);\n\n  useEffect(() => {\n    if (resetBoard) {\n      setLines([]);\n      handleResetBoard(false);\n    }\n  }, [resetBoard]);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n\n    const filteredLines = lines.filter((line) => line.tool !== 'highlighter');\n\n    setLines([\n      ...filteredLines,\n      { tool, color, strokeWidth, points: [pos.x, pos.y] }\n    ]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <div>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n      >\n        <Layer>\n          {/* <Text text='Just start drawing' x={150} y={30} /> */}\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke={line.current ? color : line.color}\n              strokeWidth={line.current ? strokeWidth : line.strokeWidth}\n              tension={0.5}\n              lineCap='round'\n              globalCompositeOperation={\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\n              }\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </div>\n  );\n}\n","export function convertHexToRGBA(hexCode, opacity) {\n  let hex = hexCode.replace('#', '');\n\n  if (hex.length === 3) {\n    hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;\n  }\n\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n\n  return `rgba(${r},${g},${b},${opacity / 100})`;\n}\n","import React, { useState } from 'react';\n\nimport DrawingTools from './DrawingTools';\nimport DrawingBoard from './DrawingBoard';\nimport { convertHexToRGBA } from '../utils/CoreUtils';\n\nfunction MainWrapper() {\n  const [tool, setTool] = useState('pen');\n  const [strokeWidth, setStrokeWidth] = useState(5);\n  const [highlighterStrokeWidth] = useState(5);\n  const [color, setColor] = useState('#ff0000');\n  const [resetBoard, setResetBoard] = useState(false);\n\n  console.log('MainWrapper', tool, strokeWidth, color);\n\n  return (\n    <div className='main-wrapper'>\n      <DrawingTools\n        tool={tool}\n        setTool={setTool}\n        strokeWidth={strokeWidth}\n        setStrokeWidth={setStrokeWidth}\n        color={color}\n        setColor={setColor}\n        handleResetBoard={setResetBoard}\n      />\n\n      <DrawingBoard\n        tool={tool}\n        strokeWidth={\n          tool === 'highlighter' ? highlighterStrokeWidth : strokeWidth\n        }\n        color={tool === 'highlighter' ? convertHexToRGBA(color, 50) : color}\n        handleResetBoard={setResetBoard}\n        resetBoard={resetBoard}\n      />\n    </div>\n  );\n}\n\nexport default MainWrapper;\n","import React from 'react';\n\nimport MainWrapper from './components/MainWrapper';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <header className='app-header'>\n        <h1>Canvas Drawing Board</h1>\n      </header>\n      <MainWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}